
import random

# список сотрудников
employees = {
    'Alice': 0,
    'Bob': 0,
    'Charlie': 0,
    'David': 0,
    'Eve': 0
}

# инициализируем список выходных дней
weekend_days = ['Saturday', 'Sunday']

# функция для выбора минимального значения приоритета
def min_priority(employees):
    min_priority = min(employees.values())
    min_employees = [k for k, v in employees.iteritems() if v == min_priority]
    return random.choice(min_employees)

# цикл по выходным дням в месяце
for day in range(1, 31):
    if day % 7 == 1 or day % 7 == 2:  # проверяем, что день - выходной
        employee = min_priority(employees)
        print(f"On day {day} {weekend_days[(day-1) % 2]}, {employee} is working.")
        employees[employee] += 1  # увеличиваем приоритет работника




import random

class Employee:
    def __init__(self, name, role, priority=0, voluntary=False):
        self.name = name
        self.role = role
        self.priority = priority
        self.voluntary = voluntary
        
    def __repr__(self):
        return f"{self.name} - {self.role}"

employees = [
    Employee("Alice", "Developer"),
    Employee("Bob", "Consultant"),
    Employee("Charlie", "Consultant"),
    Employee("David", "Developer"),
    Employee("Eve", "Consultant"),
]

def generate_weekend_team(employees):
    weekend_team = []
    
    developers = [employee for employee in employees if employee.role == "Developer"]
    consultants = [employee for employee in employees if employee.role == "Consultant"]
    
    # Priority for employees who worked this month
    for employee in employees:
        if employee.priority > 0:
            employee.priority -= 1
    
    # Choose developers for the weekend
    weekend_team.append(min(developers, key=lambda x: x.priority))
    
    # Choose consultants for the weekend
    weekend_team.extend(sorted(consultants, key=lambda x: x.priority)[:2])
    
    return weekend_team

# Example usage
for _ in range(4): # 4 weekends
    weekend_team = generate_weekend_team(employees)
    print(f"Weekend Team: {weekend_team}")





import random

# Создаем список всех сотрудников
employees = {
    'разработчик': ['Иван', 'Петр', 'Сергей', 'Алексей', 'Дмитрий'],
    'консультант': ['Анна', 'Мария', 'Елена', 'Ольга', 'Татьяна']
}

# Создаем словарь для хранения приоритетов сотрудников
priorities = {employee: 0 for employee in employees['разработчик'] + employees['консультант']}

# Создаем список для хранения состава сотрудников на выходные дни
weekend_staff = []

# Считаем количество рабочих дней в текущем месяце
working_days = 22

# Задаем количество рабочих дней для увеличения приоритета
increase_priority_days = 5

# Заполняем приоритеты сотрудников
for _ in range(working_days):
    for employee in priorities:
        if random.randint(0, 1) == 1:
            priorities[employee] += 1
            
# Формируем состав сотрудников на выходные дни
for _ in range(4):  # 4 выходных дня в месяце
    weekend_staff.append([max(employees['разработчик'], key=lambda x: priorities[x])])
    lowest_priority_consultants = sorted(employees['консультант'], key=lambda x: priorities[x])[:2]
    weekend_staff[-1].extend(lowest_priority_consultants)

# Выводим состав сотрудников на выходные дни
for i, staff in enumerate(weekend_staff, 1):
    print(f'Выходной день {i}: {staff}')

